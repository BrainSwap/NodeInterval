:                  _      _       _                       _
:  _ __   ___   __| | ___(_)_ __ | |_ ___ _ ____   ____ _| |
: | '_ \ / _ \ / _` |/ _ \ | '_ \| __/ _ \ '__\ \ / / _` | |
: | | | | (_) | (_| |  __/ | | | | ||  __/ |   \ V / (_| | |
: |_| |_|\___/ \__,_|\___|_|_| |_|\__\___|_|    \_/ \__,_|_|
:
: Automation for lazy people.

* What it does

When ran, NodeInterval watches a directory of files for changes. When it detects
a change it concats all the files in that directory and inserts them into a
specific area in a chosen document. Leave NodeInterval running in a seperate tab
as you work on your project.

The most common example is separating out your template files in a [[http://documentcloud.github.com/backbone/][backbone.js]]
or [[http://maccman.github.com/spine/][spine.js]] app so that templates are out of your html page and into organized
folders. Think of it as a simple version of [[http://sass-lang.com/][Sass]] for your JavaScript templates.

* Features

1. Works with all templating solutions including [[http://documentcloud.github.com/underscore/][underscore.js]] and [[http://api.jquery.com/category/plugins/templates/][jQuery templates]].
2. Hidden files (files that begin with "." like .git, .svn, and .DS_Store) are automatically ignored.
3. Profiles the time it takes to render all templates.
4. Date-stamped, clean, and color-coded command-line output:

: $ node nodeinterval.js
: 18 Aug 01:47:49 - INFO: NodeInterval is watching for changes. Press Ctrl-C to stop.
: 18 Aug 01:47:49 - INFO: overwrite ../assets/index.html
: 18 Aug 01:47:49 - INFO: Completed in 0.001 seconds.
: 18 Aug 01:48:04 - INFO: >>> Change detected to: ~/git/projectName/src/html/templates/signon/signon.tmpl
: 18 Aug 01:48:04 - INFO: overwrite ../assets/index.html
: 18 Aug 01:48:04 - INFO: Completed in 0.002 seconds.

* Requirements
- You must have [[http://nodejs.org/][nodejs]] installed.
- [[http://npmjs.org/][NPM]] (Node package Manager) if you want to install this package using it.
* To install

There are two ways to install. Cloning this repo or using [[http://npmjs.org/][npm]]. Once you have the
package installed feel free to modify and use the sample script from the
=samples= directory:

:    cd bin # Your scripts directory.
:    npm install nodeinterval
:    cp node_modules/nodeinterval/samples/nodeinterval.sh .
:    emacs nodeinterval.sh # Setup your variable paths with your favorite editor.
:    chmod u+x nodeinterval.sh
:    ./nodeinterval.sh

Alternatively, you can use the .js sample file instead of the .sh version and
run like so:

: node nodeinterval.js

* Usage
: var NodeInterval = require('nodeinterval');
: var nodeInterval = new NodeInterval({
:    watchFolder: '../src/html/templates/',
:    inputFile: '../src/html/index.html',
:    replacementString: '@templates@',
:    outputFile: '../assets/index.html'
:});

Where:

| Option              | Description                                                                                                                                                  |
|---------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------|
| =watchFolder=       | is the relative or absolute path to the folder you want to monitor.                                                                                          |
| =inputFile=         | is the main template you want to duplicate.                                                                                                                  |
| =replacementString= | is the string inside of =inputFile= that you want to replace with all your templates.                                                                        |
| =outputFile=        | is the relative or absolute path to the file you want to create (that's a copy of =inputFile= with the =replacementString= replaced with all your templates. |

* Sample web application layout:

If you don't have a good web application layout. Here's a good one to follow:

: .
: ├── assets               <== Your compressed assets, ready for production.
: │   ├── images
: │   ├── index.html       <== "Built" html file with your rendered templates.
: │   ├── js
: │   └── css
: ├── bin                  <== Shell scripts. "npm install nodeinterval" here.
: │   ├── node_modules     <== This folder will automatically be created.
: │   │   └── nodeinterval <== nodeinterval and it's dependencies will be
: │   │                        installed here.
: │   ├── nodeinterval.sh  <== This sample file (and the .js) version is inside
: │   │                        of nodeinterval/samples/. Use it if you like.
: │   └── sasswatch.sh     <== I like to create a Sass executable for watching
: │                            my CSS files. (not part of this project)
: └── src                  <== Raw uncompressed code here, where you should be
:     │                        editing your codez.
:     ├── index.html       <== Raw index.html files with "replacementString"
:     │                        where you want the templates.
:     ├── css              <== Uncompressed CSS assets.
:     ├── js               <== Uncompressed JS assets.
:     └── templates        <== Your .js templates. These can be all in one
:                              folder or seperated out into many folder deep,
:                              according to section. Incude the <script> part
:                              in your templates.

* Thanks:

Internally NodeInterval uses the following (included) node packages:
[[https://github.com/DelvarWorld/Simple-Node-Logger][Simple-Node-Logger]], [[https://github.com/jorritd/node-watch][node-watch]], and [[https://github.com/documentcloud/underscore][underscore]].

* Contribute:

Feedback and contributions (via pull requests) are more than welcome.
NodeInterval is really young and mostly written in one night. I'll be updating
it with features as I use it in my daily projects.

* Future plans:

1. Add and remove events. Currently NodeInterval only supports listening for
  changes. In the future it will also listen for adding and removing of templates.
2. A polling interval option.
3. JS compression. Include [[https://github.com/mishoo/UglifyJS][UglifyJS]] to optionally auto-compress and concat JS
  files in addition to templates. Note that we don't plan on compressing
  templates as they can contain a combination of HTML/CSS/JS and
  template-library-specific shorthand that a normal compressor wouldn't
  understand.
